<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="/public/css/style.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@100&family=Noto+Sans+KR&display=swap"
      rel="stylesheet"
    />
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@100;400;600&family=Noto+Sans+KR&display=swap");
    </style>
    <title>PicIt!</title>
  </head>
  <body>
    <div class="title-container">
      <div class="main-title-box">
        <div class="icon-container">
          <i class="fa-solid fa-certificate"></i>
        </div>
        <h1 class="title">RESULT</h1>
      </div>
      <form action="/" method="get" class="home-container">
        <button type="submit" class="home-btn">HOME</button>
      </form>
    </div>
    <div class="main-content-container">
      <div class="result-container">
        <div class="status-container">
          <div class="result-status-container">
            <p class="description">분석결과 : 총</p>
            <p class="word-found"></p>
            <p class="description">개의 단어가 발견되었습니다!</p>
          </div>
          <div class="highlight-container">
            <div class="highlight-desc-box">
              <p class="highlight-desc">선택된 단어 :</p>
              <p class="word-picked"></p>
              <p class="highlight-desc">개.</p>
            </div>
            <button class="select-done">선택하기</button>
            <button class="select-reset">리셋하기</button>
          </div>
        </div>
        <br />
        <div class="word-container-box">
          <div class="word-container"></div>
        </div>

        <div class="word-meaning-container">
          <div class="word-meaning-title"></div>
          <p class="word-meaning"></p>
        </div>
      </div>
      <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
        integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w=="
        crossorigin="anonymous"
        referrerpolicy="no-referrer"
      />
      <script>
        let wordArray = `<%-title%>`;
        let wordMeaning = `<%-meaning%>`;
        let arr = wordArray.split(",");
        let final_arr = [];
        let final_meaning = [];
        let lenOfWords = arr.length;
        let mean_arr = wordMeaning.split("|SPLIT|");
        const regex_number = new RegExp(/[1-9]/);
        const word_list = document.querySelector(".word-container");
        const word_title = document.querySelector(".word-meaning-title");
        const word_meaning = document.querySelector(".word-meaning");
        const result_container = document.querySelector(".result-container");
        const result_status_container = document.querySelector(
          ".result-status-container"
        );
        const word_found = document.querySelector(".word-found");
        const word_meaning_container = document.querySelector(
          ".word-meaning-container"
        );
        const word_picked = document.querySelector(".word-picked");
        const highlight_container = document.querySelector(
          ".highlight-container"
        );
        const select_done = document.querySelector(".select-done");
        const select_reset = document.querySelector(".select-reset");

        // filtering words
        for (let i = 0; i < lenOfWords; i++) {
          let str = mean_arr[i];
          let replaced_str = str.replace(",", "");
          mean_arr[i] = replaced_str;
        }
        for (let i = 0; i < lenOfWords; i++) {
          if (mean_arr[i] == "") {
            continue;
          } else if (arr[i].length <= 2) {
            continue;
          } else if (final_arr.includes(arr[i]) == true) {
            continue;
          } else if (regex_number.test(arr[i]) == true) {
            continue;
          }

          final_arr.push(arr[i]);
          final_meaning.push(mean_arr[i]);
        }
        let word_num = result_container.children;
        let show_words_len = final_arr.length;
        window.onload = function () {
          word_found.innerText = show_words_len;
          for (let i = 0; i < show_words_len; i++) {
            const temp = document.createElement("div");
            temp.className = "single-word-container";
            temp.innerHTML = `<div class="single-container"><p class="word">${final_arr[i]}</p><div class="delete-btn"><div class="delete-left"></div><div class="delete-right"></div></div></div>`;
            word_list.append(temp);
          }
          setTimeout(function () {
            word_list.style.opacity = "100%";
          }, 1000);
        };

        // showing results

        window.addEventListener("click", (e) => {
          if (e.target.classList[0] == "delete-btn") {
            let parent = e.target.parentNode.parentNode;
            show_words_len = show_words_len - 1;

            parent.style.opacity = "0%";
            word_found.innerText = show_words_len;
            setTimeout(function () {
              parent.remove();
            }, 300);
          } else if (e.target.classList[0] == "word") {
            // if show_flag == true => do something!
            let parent = e.target.parentNode.parentNode;
            let count_word = 0;
            if (e.target.classList.contains("clicked") == true) {
              parent.style.backgroundColor = "rgb(250, 250, 250)";
              e.target.classList.remove("clicked");
            } else {
              parent.style.backgroundColor = "#00ff2d";
              e.target.classList.add("clicked");
            }
            // counting words.
            word_list.childNodes.forEach((node) => {
              let word_clicked = node.childNodes[0].childNodes[0];

              if (word_clicked.classList.contains("clicked") == true) {
                count_word++;
              }
            });
            if (count_word > 0) {
              word_picked.innerText = count_word;
              highlight_container.style.opacity = "100%";
            } else {
              word_picked.innerText = "";
              highlight_container.style.opacity = "0%";
            }
          }
        });
        window.addEventListener("mouseover", (e) => {
          if (e.target.classList[0] == "word") {
            word_meaning_container.style.opacity = "0%";
            word_meaning_container.style.display = "inline-block";
            word_meaning_container.style.left = `${e.pageX}px`;
            word_meaning_container.style.top = `${e.pageY}px`;
            setTimeout(function () {
              word_title.innerText = e.target.innerText;
              word_meaning.innerText =
                final_meaning[final_arr.indexOf(e.target.innerText)];
            }, 300);
            setTimeout(function () {
              word_meaning_container.style.opacity = "100%";
            }, 500);
          } else {
            word_meaning_container.style.opacity = "0%";
            word_meaning_container.style.display = "none";
            setTimeout(function () {
              word_title.innerText = "";
              word_meaning.innerText = "";
            }, 300);
          }
        });

        select_done.addEventListener("click", () => {
          let picked_words = [];
          for (let i = 0; i < word_list.childNodes.length; i++) {
            let word = word_list.childNodes[i].childNodes[0].childNodes[0];
            if (word.classList.contains("clicked")) {
              picked_words.push([
                word.innerText,
                final_meaning[final_arr.indexOf(word.innerText)],
              ]);
            }
          }
          word_list.style.opacity = "0%";
          highlight_container.style.opacity = "0%";
          result_status_container.style.opacity = "0%";
          highlight_container.innerHTML = `<div class="send-mail-container">
              <form
                action="/share"
                method="POST"
                enctype="application/json"
                class="send-form-container"
              >
                <input type="text" class="email" name="email" />
                <button type="submit" class="submit-btn">이메일 보내기</button>
                <input type="hidden" class="word-json" value="" name="word" />
              </form>
            </div>`;
          const word_json = document.querySelector(".word-json");
          setTimeout(function () {
            word_list.textContent = "";
            result_status_container.childNodes[1].innerText =
              "선택하신 단어들을 이메일로 공유해보세요!";
            result_status_container.childNodes[3].innerText = "";
            result_status_container.childNodes[5].innerText = "";
          }, 500);
          setTimeout(function () {
            for (let i = 0; i < picked_words.length; i++) {
              const temp = document.createElement("div");
              temp.className = "picked-word-container";
              temp.innerHTML = `<p class="picked-word">${picked_words[i][0]}</p><p class="picked-meaning">${picked_words[i][1]}</p>`;
              word_list.append(temp);
            }
            word_json.value = picked_words;
            highlight_container.style.opacity = "100%";
            word_list.style.opacity = "100%";
            result_status_container.style.opacity = "100%";
          }, 1000);
        });
        select_reset.addEventListener("click", () => {
          for (let i = 0; i < word_list.childNodes.length; i++) {
            let word = word_list.childNodes[i].childNodes[0].childNodes[0];
            if (word.classList.contains("clicked")) {
              word.classList.remove("clicked");
              word_list.childNodes[i].style.backgroundColor =
                "rgb(250, 250, 250)";
            }
          }
          word_picked.innerText = "";
          highlight_container.style.opacity = "0%";
        });
      </script>
    </div>
  </body>
</html>
